// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum BoardType {
  SPRINT
  KANBAN
}

enum TicketStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

model Board {
  id          String        @id @default(cuid())
  type        BoardType
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  BoardColumn BoardColumn[]
  BoardTicket BoardTicket[]
}

model BoardColumn {
  id       String        @id @default(cuid())
  position Int
  label    TicketStatus  @default(TODO)
  board    Board         @relation(fields: [boardId], references: [id])
  boardId  String
  tickets  BoardTicket[]
}

model BoardTicket {
  id            String       @id @default(cuid())
  title         String
  description   String?
  assignedUser  User?        @relation("assignedUser", fields: [assignedTo], references: [id])
  assignedTo    String?
  reportedUser  User?        @relation("reportedUser", fields: [reportedBy], references: [id])
  reportedBy    String?
  boardColumn   BoardColumn? @relation(fields: [boardColumnId], references: [id])
  boardColumnId String?
  status        TicketStatus
  board         Board?       @relation(fields: [boardId], references: [id])
  boardId       String?
  comments      Comment[]
  storyPoints   Int?
  position      Int
  createdAt     DateTime     @default(now())
}

model Comment {
  id            String       @id @default(cuid())
  description   String
  commenter     User?        @relation(fields: [writtenBy], references: [id])
  writtenBy     String?
  createdAt     DateTime     @default(now())
  boardTicket   BoardTicket? @relation(fields: [boardTicketId], references: [id])
  boardTicketId String?
}

model User {
  id              String        @id @default(cuid())
  name            String?
  email           String?       @unique
  emailVerified   Boolean?
  image           String?
  comments        Comment[]
  assignedTicket  BoardTicket[] @relation("assignedUser")
  reportedTickets BoardTicket[] @relation("reportedUser")
  accounts        Account[]
  sessions        Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
